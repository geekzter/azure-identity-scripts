name: $(Date:yyyyMMdd)$(Rev:.r)-$(Build.DefinitionVersion)-$(SourceBranchName)-$(Build.BuildId)

parameters:
- name: jobsToRun
  displayName: Tests to run
  type: string
  default: Both
  values:
  - 'Non-modifying tests'
  - 'Modifying tests'
  - Both
- name: destroy
  displayName: Tear down resources
  type: string
  default: Always
  values:
  - Always
  - Never 
  - 'On failure'
  - 'On success'

pr:
  autoCancel: false
  branches:
    include:
    - '*'
  drafts: false
  paths:
    exclude:
    - '.devcontainer/**'  
    - 'visuals/**'  
    - '*.md'  
schedules:
- cron: '0 0 * * Tue,Fr'
  displayName: 'Bi-weekly build (UTC)'
  # Run if there are no changes
  always: 'true'
  branches:
    include:
    - main
trigger: none

variables:
- group: 'identity-ci' # Should contain 'azureConnection', 'scHasMSFTGraphPermissions', 'serviceConnectionTestPipelineId'
- name: application
  value: 'Service Connections'
- name: AZURE_CORE_ONLY_SHOW_ERRORS
  value: true
- name: AZURE_EXTENSION_USE_DYNAMIC_INSTALL
  value: yes_without_prompt
- name: scriptDirectory
  value: $(Build.SourcesDirectory)/scripts/azure-devops
- name: organizationName
  value: ${{ split(variables['System.CollectionUri'],'/')[3] }}
- name: serviceConnectionToCreate
  value: oidc-msi-test-$(Build.BuildId)
  # TODO: Convert multiple service connections
- name: serviceConnectionToConvert
  value: oidc-convert-test-$(Build.BuildId)

jobs:
- ${{ if or(eq(parameters.jobsToRun, 'Non-modifying tests'),eq(parameters.jobsToRun, 'Both')) }}:
  - job: retrievalScripts
    displayName: 'Non-modifying tests'

    pool:
      name: $[ coalesce(variables.pool,'Azure Pipelines') ]
      vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]

    steps:
    - task: AzureCLI@2
      displayName: 'enable_service_connection.ps1'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "`nSimulating enabling currently used service connection"
          ./enable_service_connection.ps1 -ServiceConnectionId $env:AZURESUBSCRIPTION_SERVICE_CONNECTION_ID
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      displayName: 'rename_service_connection_applications.ps1'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          Write-Host "`nSimulating renaming service connection applications to defaults"
          ./rename_service_connection_applications.ps1 -Reset -WhatIf

          Write-Host "`nSimulating pretty-naming service connection applications"
          ./rename_service_connection_applications.ps1 -WhatIf
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      displayName: 'list_service_connections.ps1'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account show -o json | ConvertFrom-Json | Set-Variable account

          Write-Host "`nList Service Connection in subscription '$($account.name)'"
          ./list_service_connections.ps1

        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      displayName: 'list_service_connection_identities.ps1'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          az account show -o json | ConvertFrom-Json | Set-Variable account

          Write-Host "`nList Service Connection Identities in tenant '$($account.name)'"
          ./list_service_connection_identities.ps1 -TenantId $account.tenantId

        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      displayName: 'list_identities_using_issuer.ps1'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          ./list_identities_using_issuer.ps1
          ./list_identities_using_issuer.ps1 -Issuer https://app.vstoken.visualstudio.com -Type Application
          ./list_identities_using_issuer.ps1 -Issuer https://app.vstoken.visualstudio.com -Type ManagedIdentity
          ./list_identities_using_issuer.ps1 -Issuer https://vstoken.dev.azure.com        -Type Application
          ./list_identities_using_issuer.ps1 -Issuer https://vstoken.dev.azure.com        -Type ManagedIdentity
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

    - task: AzureCLI@2
      displayName: 'set_terraform_azurerm_vars.ps1'
      inputs:
        addSpnToEnvironment: true
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: ./set_terraform_azurerm_vars.ps1
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

- ${{ if or(eq(parameters.jobsToRun, 'Modifying tests'),eq(parameters.jobsToRun, 'Both')) }}:
  - job: createServiceConnection
    displayName: 'Create Service Connection'
    pool:
      name: $[ coalesce(variables.pool,'Azure Pipelines') ]
      vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]

    steps:
    - task: AzureCLI@2
      displayName: 'Create resource groups for Managed Identity and scope'
      name: resourceGroup
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        failOnStandardError: true
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $tags=@("application=$(application)","provisioner=azure-cli","runId=$(Build.BuildId)")
          $managedIdentityResourceGroupName="${{ variables['organizationName'] }}-service-connections-$(Build.BuildId)"
          Write-Host "Creating Managed Identity resource group `"$managedIdentityResourceGroupName`"..."
          az group create --name $managedIdentityResourceGroupName `
                          --location centralus `
                          --tags $tags `
                          --query id `
                          | Set-Variable -Name managedIdentityResourceGroupId
          Write-Host "##vso[task.setvariable variable=managedIdentityResourceGroupId;isOutput=true]${managedIdentityResourceGroupId}"
          Write-Host "##vso[task.setvariable variable=managedIdentityResourceGroupName;isOutput=true]${managedIdentityResourceGroupName}"

          $scopeResourceGroupName="${{ variables['organizationName'] }}-service-connection-test-scope-$(Build.BuildId)"
          Write-Host "Creating Managed Identity resource group `"$managedIdentityResourceGroupName`"..."
          az group create --name $scopeResourceGroupName `
                          --location centralus `
                          --tags $tags `
                          --query id `
                          | Set-Variable -Name scopeResourceGroupId
          Write-Host "##vso[task.setvariable variable=scopeResourceGroupId;isOutput=true]${scopeResourceGroupId}"
          Write-Host "##vso[task.setvariable variable=scopeResourceGroupName;isOutput=true]${scopeResourceGroupName}"

    - task: AzureCLI@2
      displayName: 'Create Managed Identity and Service Connection'
      name: identity
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        failOnStandardError: true
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          if ($env:SYSTEM_DEBUG -eq "true") {
            $InformationPreference = "Continue"
            $VerbosePreference = "Continue"
            $DebugPreference = "Continue"

            Set-PSDebug -Trace 1
            
            Get-ChildItem -Path Env: -Force -Recurse -Include * | Sort-Object -Property Name | Format-Table -AutoSize | Out-String
          }
          ./create_azurerm_msi_oidc_service_connection.ps1 -IdentityName ${{ variables['organizationName'] }}-service-connection-test-$(Build.BuildId) `
                                                           -IdentityResourceGroupName $(resourceGroup.managedIdentityResourceGroupName) `
                                                           -IdentitySubscriptionId $(az account show --query id -o tsv) `
                                                           -ServiceConnectionName $(serviceConnectionToCreate) `
                                                           -ServiceConnectionScope $(resourceGroup.scopeResourceGroupId)

          az identity list -g $(resourceGroup.managedIdentityResourceGroupName) `
                          --query [0].clientId `
                          -o tsv `
                          | Set-Variable -Name clientId
          Write-Host "##vso[task.setvariable variable=clientId;isOutput=true]${clientId}"

        workingDirectory: '$(scriptDirectory)'

- ${{ if or(eq(parameters.jobsToRun, 'Modifying tests'),eq(parameters.jobsToRun, 'Both')) }}:
  - job: testCreatedServiceConnection
    condition: and(succeededOrFailed(),ne(coalesce(variables.serviceConnectionTestPipelineId,'empty'),'empty'))
    dependsOn: createServiceConnection
    displayName: 'Test created Service Connection'
    pool:
      name: $[ coalesce(variables.pool,'Azure Pipelines') ]
      vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]

    steps:
    - task: AzureCLI@2
      displayName: 'Test Service Connection $(serviceConnectionToCreate)'
      timeoutInMinutes: 5
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        failOnStandardError: true
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(scriptDirectory)'
        inlineScript: |
          ./test_service_connection.ps1 -ServiceConnectionName $(serviceConnectionToCreate) `
                                        -ServiceConnectionTestPipelineId $(serviceConnectionTestPipelineId)

- ${{ if or(eq(parameters.jobsToRun, 'Non-modifying tests'),eq(parameters.jobsToRun, 'Both')) }}:
  - job: convertServiceConnection
    displayName: 'Convert Service Connections'
    strategy:
      matrix:
        linux:
          vmImage: ubuntu-latest
        windows:
          vmImage: windows-latest
    pool:
      name: $[ coalesce(variables.pool,'Azure Pipelines') ]
      vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]

    steps:
    - task: AzureCLI@2
      displayName: 'Convert (WhatIf)'
      inputs:
        azureSubscription: '$(azureConnectionSecret)'
        failOnStandardError: true
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(scriptDirectory)'
        inlineScript: |
          if ($env:SYSTEM_DEBUG -eq "true") {
            $InformationPreference = "Continue"
            $VerbosePreference = "Continue"
            $DebugPreference = "Continue"

            Set-PSDebug -Trace 1
            
            Get-ChildItem -Path Env: -Force -Recurse -Include * | Sort-Object -Property Name | Format-Table -AutoSize | Out-String
          }
          ./convert_azurerm_service_connection_to_oidc.ps1 -Force -WhatIf

    - pwsh: |
        Write-Host "`npwsh version: $($PSVersionTable.PSVersion)"
        if ($PSVersionTable.PSVersion -lt 7.3) {
          Write-Host "convert_azurerm_service_connection_to_oidc_simple.ps1 requires `$PSNativeCommandArgumentPassing"
          Write-Host "Upgrading PowerShell to 7.3+..."
          if ($IsLinux) {
            bash -c 'sudo apt-get update --fix-missing'
            bash -c 'sudo apt upgrade powershell -y'
          }
          if ($IsWindows) {
            choco install powershell-core -y
            # dotnet tool install --global PowerShell
          }
          Write-Host "`npwsh version: $(pwsh -v)"
        } else {
          Write-Host "PowerShell version is $($PSVersionTable.PSVersion), no upgrade required"
        }
      displayName: 'Upgrade PowerShell'
      failOnStderr: true
      ignoreLASTEXITCODE: false
      retryCountOnTaskFailure: 3

    - task: AzureCLI@2
      displayName: 'Convert simple (WhatIf)'
      inputs:
        azureSubscription: '$(azureConnectionSecret)'
        failOnStandardError: true
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(scriptDirectory)'
        inlineScript: |
          if ($env:SYSTEM_DEBUG -eq "true") {
            $InformationPreference = "Continue"
            $VerbosePreference = "Continue"
            $DebugPreference = "Continue"

            Set-PSDebug -Trace 1
            
            Get-ChildItem -Path Env: -Force -Recurse -Include * | Sort-Object -Property Name | Format-Table -AutoSize | Out-String
          }
          ./convert_azurerm_service_connection_to_oidc_simple.ps1 -OrganizationUrl $env:SYSTEM_COLLECTIONURI `
                                                                  -Project $env:SYSTEM_TEAMPROJECT `
                                                                  -WhatIf

- ${{ if and(ne(parameters.destroy, 'Never'),or(eq(parameters.jobsToRun, 'Modifying tests'),eq(parameters.jobsToRun, 'Both'))) }}:
  - job: teardown
    # condition: succeededOrFailed()
    ${{ if ne(variables['Build.Reason'],'Manual') }}:
      displayName: 'Tear down resources (always on pr/schedule)'
      condition: succeededOrFailed()
    ${{ elseif eq(parameters.destroy, 'Always') }}:
      displayName: 'Tear down resources'
      condition: succeededOrFailed()
    ${{ elseif eq(parameters.destroy, 'On failure') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      condition: failed()
    ${{ elseif eq(parameters.destroy, 'On success') }}:
      displayName: 'Destroy (${{ lower(parameters.destroy) }}) infrastructure'
      condition: succeeded()
    dependsOn: 
    # - convertServiceConnection
    - createServiceConnection
    # - testConvertedServiceConnection
    - testCreatedServiceConnection
    pool:
      name: $[ coalesce(variables.pool,'Azure Pipelines') ]
      vmImage: $[ coalesce(variables.vmImage,'ubuntu-latest') ]
    variables:
      # TODO: Take outputs of multiple jobs dependencies.convertServiceConnection.outputs['job2.convert.serviceConnectionId']
      # convertedServiceConnectionId1: $[ dependencies.convertServiceConnection.outputs['job1.convert.serviceConnectionId'] ]
      # convertedServiceConnectionId2: $[ dependencies.convertServiceConnection.outputs['job2.convert.serviceConnectionId'] ]
      convertedServiceConnectionId: $[ dependencies.convertServiceConnection.outputs['convert.serviceConnectionId'] ]
      createdClientId: $[ dependencies.createServiceConnection.outputs['identity.clientId'] ]
    steps:
    - task: AzureCLI@2
      name: teardownAzure
      displayName: 'Tear down Azure resources'
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
          # Build JMESPath expression
          $tagQuery = "[?tags.application == '$(application)' && tags.runId == '$(Build.BuildId)' && properties.provisioningState != 'Deleting'].id"
          Write-Host "Removing resources identified by `"$tagQuery`"..."

          # Remove resource groups
          $resourceGroupIDs = $(az group list --query "${tagQuery}" -o tsv)
          if ($resourceGroupIDs) {
            Write-Host "Removing resource group(s) `"${resourceGroupIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceGroupIDs 2>&1
            }
          } else {
            Write-Host "No resource groups to remove"
          }

          # Remove (remaining) resources
          $resourceIDs = $(az resource list --query "${tagQuery}" -o tsv)
          if ($resourceIDs) {
            Write-Host "Removing resources `"${resourceIDs}`"..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az resource delete --ids $resourceIDs 2>&1
            }
          } else {
            Write-Host "No resources to remove"
          }
        failOnStandardError: true

    - task: AzureCLI@2
      displayName: 'Tear down Service Connections'
      name: teardownAzDO
      condition: succeededOrFailed()
      inputs:
        azureSubscription: '$(azureConnectionWIF)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $ErrorActionPreference = "Continue" # Continue to remove resources if remove by resource group fails
          az devops configure --defaults organization="$(System.CollectionUri)" project="$(System.TeamProject)"

          az devops service-endpoint list --query "[?authorization.parameters.serviceprincipalid=='$(createdClientId)'].id" `
                                          -o tsv `
                                          | Set-Variable -Name serviceConnectionId
          if (!$serviceConnectionId) {
            Write-Host "No created service connections to remove"
            exit 0
          } else {
            Write-Host "Removing created service connection ${serviceConnectionId}..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az devops service-endpoint delete --id $serviceConnectionId --yes 2>&1
            }
          }

          # TODO: Take outputs of multiple jobs
          # foreach ($convertedServiceConnectionId in @('$(convertedServiceConnectionId1)','$(convertedServiceConnectionId2)')) {
          # }
          if ([string]::IsNullOrEmpty('$(convertedServiceConnectionId)')) {
            Write-Host "No converted service connection to remove"
            exit 0
          } else {
            Write-Host "Removing converted service connection ${serviceConnectionId}..."
            &{ # az writes information to stderr
              $ErrorActionPreference = 'SilentlyContinue'
              az devops service-endpoint delete --deep --yes --id $(convertedServiceConnectionId) 2>&1
            }
          }

        failOnStandardError: true