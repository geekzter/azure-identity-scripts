parameters:
- name: azureConnection
  type: string
- name: serviceConnectionToTest
  type: string

variables:
  serviceConnectionToTest: ${{ parameters.serviceConnectionToTest }}
  azureConnection: ${{ parameters.azureConnection }}
  
steps:
- task: AzureCLI@2
  displayName: 'Test Service Connection $(serviceConnectionToTest)'
  timeoutInMinutes: 5
  inputs:
    azureSubscription: '$(azureConnection)'
    failOnStandardError: true
    scriptType: pscore
    scriptLocation: inlineScript
    inlineScript: |
      Write-Host "Using $(serviceConnectionToTest)"

      az devops configure --defaults organization=$(System.CollectionUri) project="$(System.TeamProject)"

      Write-Host "Authorizing the service connection to use the pipeline..."
      az devops service-endpoint list --query "[?name=='$(serviceConnectionToTest)'].id" `
                                      -o tsv `
                                      | Set-Variable serviceConnectionId
      if (!$serviceConnectionId) {
        Write-Host "##vso[task.LogIssue type=error]Service connection '$(serviceConnectionToTest)' not found."
        Write-Error "Service connection '$(serviceConnectionToTest)' not found."
        exit 1
      }
      az devops service-endpoint update --id $serviceConnectionId `
                                        --enable-for-all true

      Write-Host "Running the test pipeline with parameter serviceConnection=$(serviceConnectionToTest)..."
      az pipelines run --id $(serviceConnectionTestPipelineId) `
                        --parameters serviceConnection="$(serviceConnectionToTest)" `
                        -o json `
                        | ConvertFrom-Json `
                        | Set-Variable run
      $run | ConvertTo-Json | Out-String | Write-Debug
      $run | Format-List | Out-String | Write-Debug
      "{0}{1}/_build/results?buildId={2}&view=results" -f "$(System.CollectionUri)", [uri]::EscapeDataString("$(System.TeamProject)"), $run.id | Write-Host
      Write-Host "Waiting for pipeline run $($run.id) to complete..."
      do {
          Start-Sleep -Seconds 5
          az pipelines runs show --id $run.id `
                                  -o json `
                                  | ConvertFrom-Json `
                                  | Set-Variable run
          $run | ConvertTo-Json | Out-String | Write-Debug
          $run | Format-List | Out-String | Write-Debug
          # pause
          Write-Host "Run status: $($run.status)"
      } while ($run.status -ne 'completed')
      Write-Host "Run result: $($run.result)"

      if ($run.result -notmatch 'succeeded') {
          Write-Host "##vso[task.LogIssue type=error]Service Connection test job failed with result: $($run.result)"
          Write-Error "Run failed with result: $($run.result)"
          exit 1
      }